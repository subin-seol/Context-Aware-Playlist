<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/comp90018/contexttunes/domain/Context.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/comp90018/contexttunes/domain/Context.java" />
              <option name="originalContent" value="package com.comp90018.contexttunes.domain;&#10;&#10;import com.comp90018.contexttunes.data.sensors.LightSensor.LightBucket;&#10;// timeofday is: &quot;morning&quot;, &quot;afternoon&quot;, &quot;evening&quot;, &quot;night&quot;&#10;// activity is something like: &quot;still&quot;, &quot;walking&quot;, &quot;running&quot; (mock for now)&#10;public class Context {&#10;    public final LightBucket lightLevel;&#10;    public final String timeOfDay;&#10;    public final String activity;&#10;&#10;    public Context(LightBucket lightLevel, String timeOfDay, String activity) {&#10;        this.lightLevel = lightLevel;&#10;        this.timeOfDay = timeOfDay;&#10;        this.activity = activity;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.comp90018.contexttunes.domain;&#10;&#10;import com.comp90018.contexttunes.data.sensors.LightSensor.LightBucket;&#10;import com.comp90018.contexttunes.data.weather.WeatherService.WeatherState;&#10;&#10;// timeofday is: &quot;morning&quot;, &quot;afternoon&quot;, &quot;evening&quot;, &quot;night&quot;&#10;// activity is something like: &quot;still&quot;, &quot;walking&quot;, &quot;running&quot; (mock for now)&#10;// weather is: SUNNY, CLOUDY, RAINY, UNKNOWN&#10;public class Context {&#10;    public final LightBucket lightLevel;&#10;    public final String timeOfDay;&#10;    public final String activity;&#10;    public final WeatherState weather;&#10;&#10;    public Context(LightBucket lightLevel, String timeOfDay, String activity, WeatherState weather) {&#10;        this.lightLevel = lightLevel;&#10;        this.timeOfDay = timeOfDay;&#10;        this.activity = activity;&#10;        this.weather = weather;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/comp90018/contexttunes/domain/RuleEngine.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/comp90018/contexttunes/domain/RuleEngine.java" />
              <option name="originalContent" value="package com.comp90018.contexttunes.domain;&#10;&#10;import com.comp90018.contexttunes.data.sensors.LightSensor.LightBucket;&#10;import java.util.Calendar;&#10;&#10;public class RuleEngine {&#10;&#10;    // Our 4 fixed playlists&#10;    private static final Playlist FOCUS_PLAYLIST = new Playlist(&#10;            &quot;Focus&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DX0XUsuxWHRQd&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DX0XUsuxWHRQd&quot;&#10;    );&#10;&#10;    private static final Playlist PUMP_UP_PLAYLIST = new Playlist(&#10;            &quot;Pump-up&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DX4JAvHpjipBk&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DX4JAvHpjipBk&quot;&#10;    );&#10;&#10;    private static final Playlist CHILL_PLAYLIST = new Playlist(&#10;            &quot;Chill&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DWYcDQ1hSjOpY&quot;&#10;    );&#10;&#10;    private static final Playlist MORNING_PLAYLIST = new Playlist(&#10;            &quot;Morning&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DX0yEZaMOXna3&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DX0yEZaMOXna3&quot;&#10;    );&#10;&#10;    public static Recommendation getRecommendation(Context context) {&#10;        String timeOfDay = context.timeOfDay;&#10;        LightBucket light = context.lightLevel;&#10;&#10;        // rules&#10;        if (timeOfDay.equals(&quot;morning&quot;) &amp;&amp; light == LightBucket.BRIGHT) {&#10;            return new Recommendation(MORNING_PLAYLIST, &quot;Bright morning light detected&quot;);&#10;        }&#10;&#10;        if (light == LightBucket.DIM &amp;&amp; (timeOfDay.equals(&quot;evening&quot;) || timeOfDay.equals(&quot;night&quot;))) {&#10;            return new Recommendation(CHILL_PLAYLIST, &quot;Dim lighting suggests relaxation time&quot;);&#10;        }&#10;&#10;        if (light == LightBucket.BRIGHT &amp;&amp; context.activity.equals(&quot;still&quot;)) {&#10;            return new Recommendation(FOCUS_PLAYLIST, &quot;Bright light and stationary - perfect for focus&quot;);&#10;        }&#10;&#10;        // fallback&#10;        return new Recommendation(PUMP_UP_PLAYLIST, &quot;Ready for some energy&quot;);&#10;    }&#10;&#10;    public static String getCurrentTimeOfDay() {&#10;        Calendar cal = Calendar.getInstance();&#10;        int hour = cal.get(Calendar.HOUR_OF_DAY);&#10;&#10;        if (hour &gt;= 6 &amp;&amp; hour &lt; 12) return &quot;morning&quot;;&#10;        if (hour &gt;= 12 &amp;&amp; hour &lt; 17) return &quot;afternoon&quot;;&#10;        if (hour &gt;= 17 &amp;&amp; hour &lt; 21) return &quot;evening&quot;;&#10;        return &quot;night&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.comp90018.contexttunes.domain;&#10;&#10;import com.comp90018.contexttunes.data.sensors.LightSensor.LightBucket;&#10;import com.comp90018.contexttunes.data.weather.WeatherService.WeatherState;&#10;import java.util.Calendar;&#10;&#10;public class RuleEngine {&#10;&#10;    // Our 4 fixed playlists&#10;    private static final Playlist FOCUS_PLAYLIST = new Playlist(&#10;            &quot;Focus&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DX0XUsuxWHRQd&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DX0XUsuxWHRQd&quot;&#10;    );&#10;&#10;    private static final Playlist PUMP_UP_PLAYLIST = new Playlist(&#10;            &quot;Pump-up&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DX4JAvHpjipBk&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DX4JAvHpjipBk&quot;&#10;    );&#10;&#10;    private static final Playlist CHILL_PLAYLIST = new Playlist(&#10;            &quot;Chill&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DWYcDQ1hSjOpY&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DWYcDQ1hSjOpY&quot;&#10;    );&#10;&#10;    private static final Playlist MORNING_PLAYLIST = new Playlist(&#10;            &quot;Morning&quot;,&#10;            &quot;spotify:playlist:37i9dQZF1DX0yEZaMOXna3&quot;,&#10;            &quot;https://open.spotify.com/playlist/37i9dQZF1DX0yEZaMOXna3&quot;&#10;    );&#10;&#10;    public static Recommendation getRecommendation(Context context) {&#10;        String timeOfDay = context.timeOfDay;&#10;        LightBucket light = context.lightLevel;&#10;        WeatherState weather = context.weather;&#10;&#10;        // Weather-based rules (high priority)&#10;        if (weather == WeatherState.RAINY) {&#10;            return new Recommendation(CHILL_PLAYLIST, &quot;Rainy weather calls for cozy vibes&quot;);&#10;        }&#10;&#10;        if (weather == WeatherState.SUNNY &amp;&amp; timeOfDay.equals(&quot;morning&quot;)) {&#10;            return new Recommendation(MORNING_PLAYLIST, &quot;Sunny morning - perfect start to the day&quot;);&#10;        }&#10;&#10;        if (weather == WeatherState.SUNNY &amp;&amp; context.activity.equals(&quot;still&quot;)) {&#10;            return new Recommendation(PUMP_UP_PLAYLIST, &quot;Sunny weather boosts energy&quot;);&#10;        }&#10;&#10;        if (weather == WeatherState.CLOUDY &amp;&amp; (timeOfDay.equals(&quot;evening&quot;) || timeOfDay.equals(&quot;night&quot;))) {&#10;            return new Recommendation(CHILL_PLAYLIST, &quot;Cloudy evening suggests relaxation&quot;);&#10;        }&#10;&#10;        // Original light-based rules (fallback)&#10;        if (timeOfDay.equals(&quot;morning&quot;) &amp;&amp; light == LightBucket.BRIGHT) {&#10;            return new Recommendation(MORNING_PLAYLIST, &quot;Bright morning light detected&quot;);&#10;        }&#10;&#10;        if (light == LightBucket.DIM &amp;&amp; (timeOfDay.equals(&quot;evening&quot;) || timeOfDay.equals(&quot;night&quot;))) {&#10;            return new Recommendation(CHILL_PLAYLIST, &quot;Dim lighting suggests relaxation time&quot;);&#10;        }&#10;&#10;        if (light == LightBucket.BRIGHT &amp;&amp; context.activity.equals(&quot;still&quot;)) {&#10;            return new Recommendation(FOCUS_PLAYLIST, &quot;Bright light and stationary - perfect for focus&quot;);&#10;        }&#10;&#10;        // fallback&#10;        return new Recommendation(PUMP_UP_PLAYLIST, &quot;Ready for some energy&quot;);&#10;    }&#10;&#10;    public static String getCurrentTimeOfDay() {&#10;        Calendar cal = Calendar.getInstance();&#10;        int hour = cal.get(Calendar.HOUR_OF_DAY);&#10;&#10;        if (hour &gt;= 6 &amp;&amp; hour &lt; 12) return &quot;morning&quot;;&#10;        if (hour &gt;= 12 &amp;&amp; hour &lt; 17) return &quot;afternoon&quot;;&#10;        if (hour &gt;= 17 &amp;&amp; hour &lt; 21) return &quot;evening&quot;;&#10;        return &quot;night&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>